# define output folder structure
MuTect_out=config['out']['outdir']+"/results/Mutect/"+config['in']['Bioproject']+"/"+config['in']['CaseName']
MuTect2_out=config['out']['outdir']+"/results/Mutect2/"+config['in']['Bioproject']+"/"+config['in']['CaseName']
Germline_out=config['out']['outdir']+"/results/Germline/"+config['in']['Bioproject']+"/"+config['in']['CaseName']
DepthOfCoverage_out=config['out']['outdir']+"/results/DepthOfCoverage/"+config['in']['Bioproject']+"/"+config['in']['CaseName']
strelka_out=config['out']['outdir']+"/results/strelka/"+config['in']['Bioproject']+"/"+config['in']['CaseName']


rule all:
    input:
        # config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Normal_Run']+"_rg_added_sorted_dedupped_removed.realigned.bam",
        # config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Tumor_Run']+"_rg_added_sorted_dedupped_removed.realigned.bam"
        MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.bam_call_stats.txt",
        MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.bam_coverage.wig",
        MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.MuTect.vcf"

rule download_normal:
    output:
        normal_1=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Normal_Run']+"/"+config['in']['Normal_Run']+"_1.fastq.gz",
        normal_2=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Normal_Run']+"/"+config['in']['Normal_Run']+"_2.fastq.gz"
    params:
        Normal_Run=config['in']['Normal_Run'],
        normal_dir=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Normal_Run']+"/"
    conda:
        config['envs']['wesenv']
    threads:
        1
    shell:
        '''
        fasterq-dump --split-files {params.Normal_Run} -O {params.normal_dir}
        gzip -f {params.normal_dir}/{params.Normal_Run}_1.fastq
        gzip -f {params.normal_dir}/{params.Normal_Run}_2.fastq
        '''

rule download_tumor:
    output:
        tumor_1=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Tumor_Run']+"/"+config['in']['Tumor_Run']+"_1.fastq.gz",
        tumor_2=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Tumor_Run']+"/"+config['in']['Tumor_Run']+"_2.fastq.gz"
    params:
        Tumor_Run=config['in']['Tumor_Run'],
        tumor_dir=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Tumor_Run']+"/"
    conda:
        config['envs']['wesenv']
    threads:
        1
    shell:
        '''
        fasterq-dump --split-files {params.Tumor_Run} -O {params.tumor_dir}
        gzip -f {params.tumor_dir}/{params.Tumor_Run}_1.fastq
        gzip -f {params.tumor_dir}/{params.Tumor_Run}_2.fastq
        '''

# wildcard SRR = Normal_Run or Tumor_Run
rule read_mapping:
    input:
        read_1=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}/{SRR}_1.fastq.gz",
        read_2=config['out']['outdir']+"/data/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}/{SRR}_2.fastq.gz"
    output:
        config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}.sam"
    params:
        out_dir=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName'],
        ref=config['in']['ref']
    conda:
        config['envs']['wesenv']
    threads:
        config['resources']['threads']
    resources:
        mem=config['resources']['mem']
    shell:
        '''
        bwa aln -t {threads} {params.ref} {input.read_1} > {params.out_dir}/{wildcards.SRR}_1.sai
        bwa aln -t {threads} {params.ref} {input.read_2} > {params.out_dir}/{wildcards.SRR}_2.sai
        bwa sampe {params.ref} \
            {params.out_dir}/{wildcards.SRR}_1.sai \
            {params.out_dir}/{wildcards.SRR}_2.sai \
            {input.read_1} \
            {input.read_2} \
            > {output}
        '''

rule get_header:
    input:
        config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}.sam"
    output:
        config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/header_{SRR}"
    conda:
        config['envs']['wesenv']
    threads:
        1
    shell:
        '''
        samtools view -H {input} > {output}
        '''

rule remove_unmapped:
    input:
        sam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}.sam",
        header=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/header_{SRR}"
    output:
        cleaned_sam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}-cleaned.sam"
    conda:
        config['envs']['wesenv']
    params:
        out_dir=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']
    threads:
        1
    shell:
        '''
        cat {input.header} > {output.cleaned_sam}
        awk 'BEGIN{{FS="\\t";OFS="\\t"}}{{if($2%16==3) print $0}}' {input.sam} >> {output.cleaned_sam}
        '''

rule sort_sam:
    input:
        cleaned_sam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}-cleaned.sam"
    output:
        sorted_bam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted.bam",
    conda:
        config['envs']['wesenv']
    threads:
        config['resources']['threads']
    resources:
        mem=config['resources']['mem']
    shell:
        '''
        picard AddOrReplaceReadGroups I={input.cleaned_sam} \
            O={output.sorted_bam} \
            SO=coordinate RGID=4 RGLB=lib1 RGPL=illumina RGPU=unit1 RGSM={wildcards.SRR}
        '''

rule remove_duplicate:
    input:
        sorted_bam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted.bam"
    output:
        nodup_bam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted_dedupped_removed.bam",
        dup_matrix=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}-outputdup.metrics"
    conda:
        config['envs']['wesenv']
    threads:
        1
    shell:
        '''
        picard MarkDuplicates I={input.sorted_bam} \
            O={output.nodup_bam} CREATE_INDEX=true \
            VALIDATION_STRINGENCY=SILENT M={output.dup_matrix} REMOVE_SEQUENCING_DUPLICATES=true
        '''

rule prepare_realign:
    input:
        nodup_bam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted_dedupped_removed.bam",
        ref=config['in']['ref']
    output:
        intervals=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted_dedupped_removed.realigned.bam.intervals"
    conda:
        config['envs']['wesenv']
    threads:
        config['resources']['threads']
    resources:
        mem=config['resources']['mem']
    shell:
        '''
        GenomeAnalysisTK -T RealignerTargetCreator -R {input.ref} \
            -I {input.nodup_bam} \
            -nt {threads} \
            --allow_potentially_misencoded_quality_scores \
            -o {output.intervals} 
        '''

# IndelRealigner doesn't support parallel execution
rule realign:
    input:
        nodup_bam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted_dedupped_removed.bam",
        intervals=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted_dedupped_removed.realigned.bam.intervals",
        ref=config['in']['ref']
    output:
        realign_bam=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/{SRR}_rg_added_sorted_dedupped_removed.realigned.bam"
    conda:
        config['envs']['wesenv']
    threads:
        1
    shell:
        '''
        GenomeAnalysisTK -T IndelRealigner -R {input.ref} \
            -I {input.nodup_bam} \
            --monitorThreadEfficiency \
            -targetIntervals {input.intervals} \
            --allow_potentially_misencoded_quality_scores \
            -o {output.realign_bam}
        '''


# cannot find a stable version of mutect in bioconda
# only work with gacrc software support!!
# DbSNP_canFam3_version151-DogSD_Feb2020_V4.vcf is missing
# use DbSNP_canFam3_version151-DogSD_Broad_March2022.vcf instead
rule Mutect:
    input:
        normal=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Normal_Run']+"_rg_added_sorted_dedupped_removed.realigned.bam",
        tumor=config['out']['outdir']+"/out/"+config['in']['Bioproject']+"/"+config['in']['CaseName']+"/"+config['in']['Tumor_Run']+"_rg_added_sorted_dedupped_removed.realigned.bam",
        ref=config['in']['ref'],
        snp=config['in']['snp'],
        interval=config['in']['interval']
    output:
        call_stats=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.bam_call_stats.txt",
        coverage_file=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.bam_coverage.wig",
        vcf=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.MuTect.vcf"
    params:
        defaultBaseQualities=30
    conda:
        config['envs']['wesenv']
    threads:
        config['resources']['threads']
    resources:
        mem=config['resources']['mem']
    shell:
        '''
        module load MuTect/1.1.7-Java-1.7.0_80
        java -jar $EBROOTMUTECT/mutect-1.1.7.jar --analysis_type MuTect \
            -nt {threads} \
            --reference_sequence {input.ref} \
            --dbsnp {input.snp} \
            --defaultBaseQualities {params.defaultBaseQualities} \
            --intervals {input.interval} \
            --input_file:normal {input.normal} \
            --input_file:tumor {input.tumor} \
            --out {output.call_stats} \
            --coverage_file {output.coverage_file} \
            --vcf {output.vcf}
        module unload MuTect/1.1.7-Java-1.7.0_80
        '''

rule Mutect_Annovar:
    input:
        call_stats=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.bam_call_stats.txt",
        vcf=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.MuTect.vcf",
        genename=config['in']['genename']
    output:
        vcf_pass=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.MuTect.vcf-PASS",
        vcf_pass_avinput=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.MuTect.vcf-PASS-avinput",
        annovar_out=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.MuTect.vcf-PASS-avinput.exonic_variant_function",
        add_genename=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.MuTect.vcf-PASS-avinput.exonic_variant_function_WithGeneName"
    params:
        annovar_dir=config['scripts']['annovar_dir'],
        share_dir=config['scripts']['share_dir'],
        MuTect_out=MuTect_out
    conda:
        config['envs']['annovarenv']
    threads:
        config['resources']['threads']
    resources:
        mem=config['resources']['mem']
    shell:
        '''
        cd {params.MuTect_out}
        # Extract PASS records from vcf
        awk '$7 == "PASS" {print $0}' {input.vcf} > {output.vcf_pass}
        # annovar input preparation
        perl {params.annovar_dir}/convert2annovar.pl -format vcf4old {output.vcf_pass} > {output.vcf_pass_avinput}
        # annovar annotate
        perl {params.annovar_dir}/annotate_variation.pl --buildver canFam3 {output.vcf_pass_avinput} {params.annovar_dir}
        # add gene name
        python {params.share_dir}/Add_GeneName_N_Signature.py {output.annovar_out} {input.genename}
        '''

rule five_step_filter_Annovar:
    input:
        call_stats=MuTect_out+"/"+config['in']['CaseName']+"_rg_added_sorted_dedupped_removed.realigned.bam_call_stats.txt"
    output:
    params:
        annovar_dir=config['scripts']['annovar_dir'],
        share_dir=config['scripts']['share_dir'],
        MuTect_out=MuTect_out
    conda:
        config['envs']['annovarenv']
    threads:
        config['resources']['threads']
    resources:
        mem=config['resources']['mem']
    shell:
        '''
        cd {params.MuTect_out}
        # 5 Steps filtering
        awk '$7 == "PASS" {print $0}' {input.vcf} > {output.vcf_pass}
        # annovar input preparation
        perl {params.annovar_dir}/convert2annovar.pl -format vcf4old {output.vcf_pass} > {output.vcf_pass_avinput}
        # annovar annotate
        perl {params.annovar_dir}/annotate_variation.pl --buildver canFam3 {output.vcf_pass_avinput} {params.annovar_dir}
        # add gene name
        python {params.share_dir}/Add_GeneName_N_Signature.py {output.annovar_out} {input.genename}
        '''


rule germline_mutation:


# remove unuseful intermediate files to save disc space
rule remove_intermediate: