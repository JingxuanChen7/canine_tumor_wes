filter(Assay.Type == "WXS" & LibraryLayout == "PAIRED" & Organism == "Canis lupus familiaris") %>%
select(Run,BioProject,BioSample, Sample.Name, BREED, Platform, ReleaseDate, Age, sex, Tissue, disease_stage, disease) %>%
rename(Run_ID = Run, Sample_ID = BioSample, Case_ID = Sample.Name, Breed = BREED, Sex = sex, Disease_stage = disease_stage, Tumor_type = disease) %>%
mutate(Organization = "CNRS - University Rennes", Status = NA, Symbol = NA, Sample_status = NA, Survival_status = NA, Tumor_grade = NA) %>%
mutate(Status = case_when(Tumor_type == "" ~ "Normal", TRUE ~ "Tumor")) %>%
mutate(Case_ID = gsub("_.*$","",Case_ID, perl = T)) %>%
mutate(Case_ID = gsub("(E|F)$","E-F",Case_ID, perl = T))
df_PRJNA786469 <- read.csv(srarunlist, stringsAsFactors = F) %>%
filter(Assay.Type == "WXS" & LibraryLayout == "PAIRED" & Organism == "Canis lupus familiaris") %>%
select(Run,BioProject,BioSample, Sample.Name, BREED, Platform, ReleaseDate, Age, sex, Tissue, disease_stage, disease) %>%
rename(Run_ID = Run, Sample_ID = BioSample, Case_ID = Sample.Name, Breed = BREED, Sex = sex, Disease_stage = disease_stage, Tumor_type = disease) %>%
mutate(Organization = "CNRS - University Rennes", Status = NA, Symbol = NA, Sample_status = NA, Survival_status = NA, Tumor_grade = NA) %>%
mutate(Status = case_when(Tumor_type == "" ~ "Normal", TRUE ~ "Tumor")) %>%
mutate(Case_ID = gsub("_.*$","",Case_ID, perl = T)) %>%
mutate(Case_ID = gsub("(A|B)$","A-B",Case_ID, perl = T), Case_ID = gsub("(E|F)$","E-F",Case_ID, perl = T))
mutate(Case_ID = gsub("_.*$","",Case_ID, perl = T)) %>%
)
df_PRJNA786469 <- read.csv(srarunlist, stringsAsFactors = F) %>%
filter(Assay.Type == "WXS" & LibraryLayout == "PAIRED" & Organism == "Canis lupus familiaris") %>%
select(Run,BioProject,BioSample, Sample.Name, BREED, Platform, ReleaseDate, Age, sex, Tissue, disease_stage, disease) %>%
rename(Run_ID = Run, Sample_ID = BioSample, Case_ID = Sample.Name, Breed = BREED, Sex = sex, Disease_stage = disease_stage, Tumor_type = disease) %>%
mutate(Organization = "CNRS - University Rennes", Status = NA, Symbol = NA, Sample_status = NA, Survival_status = NA, Tumor_grade = NA) %>%
mutate(Status = case_when(Tumor_type == "" ~ "Normal", TRUE ~ "Tumor")) %>%
mutate(Case_ID = gsub("_.*$","",Case_ID, perl = T)) %>%
mutate(Case_ID = gsub("(A|B)$","A-B",Case_ID, perl = T), Case_ID = gsub("(C|D)$","C-D",Case_ID, perl = T), Case_ID = gsub("(E|F)$","E-F",Case_ID, perl = T), Case_ID = gsub("(G|H)$","G-H",Case_ID, perl = T),
Case_ID = gsub("(I|J)$","I-J",Case_ID, perl = T), Case_ID = gsub("(K|L)$","K-L",Case_ID, perl = T), Case_ID = gsub("(M|N)$","M-N",Case_ID, perl = T), Case_ID = gsub("(O|P)$","O-P",Case_ID, perl = T),
Case_ID = gsub("(Q|R)$","Q-R",Case_ID, perl = T), Case_ID = gsub("(S|T)$","S-T",Case_ID, perl = T), Case_ID = gsub("(U|V)$","U-V",Case_ID, perl = T), Case_ID = gsub("(W|X)$","W-X",Case_ID, perl = T),
Case_ID = gsub("(Y|Z)$","Y-Z",Case_ID, perl = T), Case_ID = gsub("(0|1)$","0-1",Case_ID, perl = T), Case_ID = gsub("(2|3)$","2-3",Case_ID, perl = T), Case_ID = gsub("(4|5)$","4-5",Case_ID, perl = T),
Case_ID = gsub("(6|7)$","6-7",Case_ID, perl = T), Case_ID = gsub("(8|9)$","8-9"))
df_PRJNA786469 <- read.csv(srarunlist, stringsAsFactors = F) %>%
filter(Assay.Type == "WXS" & LibraryLayout == "PAIRED" & Organism == "Canis lupus familiaris") %>%
select(Run,BioProject,BioSample, Sample.Name, BREED, Platform, ReleaseDate, Age, sex, Tissue, disease_stage, disease) %>%
rename(Run_ID = Run, Sample_ID = BioSample, Case_ID = Sample.Name, Breed = BREED, Sex = sex, Disease_stage = disease_stage, Tumor_type = disease) %>%
mutate(Organization = "CNRS - University Rennes", Status = NA, Symbol = NA, Sample_status = NA, Survival_status = NA, Tumor_grade = NA) %>%
mutate(Status = case_when(Tumor_type == "" ~ "Normal", TRUE ~ "Tumor")) %>%
mutate(Case_ID = gsub("_.*$","",Case_ID, perl = T)) %>%
mutate(Case_ID = gsub("(A|B)$","A-B",Case_ID, perl = T), Case_ID = gsub("(C|D)$","C-D",Case_ID, perl = T), Case_ID = gsub("(E|F)$","E-F",Case_ID, perl = T), Case_ID = gsub("(G|H)$","G-H",Case_ID, perl = T),
Case_ID = gsub("(I|J)$","I-J",Case_ID, perl = T), Case_ID = gsub("(K|L)$","K-L",Case_ID, perl = T), Case_ID = gsub("(M|N)$","M-N",Case_ID, perl = T), Case_ID = gsub("(O|P)$","O-P",Case_ID, perl = T),
Case_ID = gsub("(Q|R)$","Q-R",Case_ID, perl = T), Case_ID = gsub("(S|T)$","S-T",Case_ID, perl = T), Case_ID = gsub("(U|V)$","U-V",Case_ID, perl = T), Case_ID = gsub("(W|X)$","W-X",Case_ID, perl = T),
Case_ID = gsub("(Y|Z)$","Y-Z",Case_ID, perl = T), Case_ID = gsub("(0|1)$","0-1",Case_ID, perl = T), Case_ID = gsub("(2|3)$","2-3",Case_ID, perl = T), Case_ID = gsub("(4|5)$","4-5",Case_ID, perl = T),
Case_ID = gsub("(6|7)$","6-7",Case_ID, perl = T), Case_ID = gsub("(8|9)$","8-9",Case_ID, perl = T))
df_PRJNA786469 <- read.csv(srarunlist, stringsAsFactors = F) %>%
filter(Assay.Type == "WXS" & LibraryLayout == "PAIRED" & Organism == "Canis lupus familiaris") %>%
select(Run,BioProject,BioSample, Sample.Name, BREED, Platform, ReleaseDate, Age, sex, Tissue, disease_stage, disease) %>%
rename(Run_ID = Run, Sample_ID = BioSample, Case_ID = Sample.Name, Breed = BREED, Sex = sex, Disease_stage = disease_stage, Tumor_type = disease) %>%
mutate(Organization = "CNRS - University Rennes", Status = NA, Symbol = NA, Sample_status = NA, Survival_status = NA, Tumor_grade = NA) %>%
mutate(Status = case_when(Tumor_type == "" ~ "Normal", TRUE ~ "Tumor")) %>%
mutate(Case_ID = gsub("(A|B)$","A-B",Case_ID, perl = T), Case_ID = gsub("(C|D)$","C-D",Case_ID, perl = T), Case_ID = gsub("(E|F)$","E-F",Case_ID, perl = T), Case_ID = gsub("(G|H)$","G-H",Case_ID, perl = T),
Case_ID = gsub("(I|J)$","I-J",Case_ID, perl = T), Case_ID = gsub("(K|L)$","K-L",Case_ID, perl = T), Case_ID = gsub("(M|N)$","M-N",Case_ID, perl = T), Case_ID = gsub("(O|P)$","O-P",Case_ID, perl = T),
Case_ID = gsub("(Q|R)$","Q-R",Case_ID, perl = T), Case_ID = gsub("(S|T)$","S-T",Case_ID, perl = T), Case_ID = gsub("(U|V)$","U-V",Case_ID, perl = T), Case_ID = gsub("(W|X)$","W-X",Case_ID, perl = T),
Case_ID = gsub("(Y|Z)$","Y-Z",Case_ID, perl = T), Case_ID = gsub("(0|1)$","0-1",Case_ID, perl = T), Case_ID = gsub("(2|3)$","2-3",Case_ID, perl = T), Case_ID = gsub("(4|5)$","4-5",Case_ID, perl = T),
Case_ID = gsub("(6|7)$","6-7",Case_ID, perl = T), Case_ID = gsub("(8|9)$","8-9",Case_ID, perl = T)) %>%
mutate(Case_ID = gsub("_.*$","",Case_ID, perl = T))
###    but WITHOUT ANY WARRANTY; without even the implied warranty of               ###
###    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                ###
###    GNU General Public License for more details.                                 ###
###                                                                                 ###
###    You should have received a copy of the GNU General Public License            ###
###    along with this program.  If not, see <https://www.gnu.org/licenses/>.       ###
###                                                                                 ###
###    Email: burair.alsaihati25@uga.edu, burair_99@yahoo.com, szhao@uga.edu        ###
###                                                                                 ###
#######################################################################################
library(data.table)
###    but WITHOUT ANY WARRANTY; without even the implied warranty of               ###
###    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                ###
###    GNU General Public License for more details.                                 ###
###                                                                                 ###
###    You should have received a copy of the GNU General Public License            ###
###    along with this program.  If not, see <https://www.gnu.org/licenses/>.       ###
###                                                                                 ###
###    Email: burair.alsaihati25@uga.edu, burair_99@yahoo.com, szhao@uga.edu        ###
###                                                                                 ###
#######################################################################################
library(data.table)
meta_row_count <- 1;
################# Parameters related to the VAF file structure ########################
# Please don't change any of these parameters
residue_column_count <- 7;
depth_cutoff <- 10; # Cutoff for minimum coverage. Any variant with coverage < 10 will be assigned a VAF value of NA.
seperator <- "/"
#"/Volumes/Research/MAC_Research_Data/Pan_cancer/Pan_cancer-analysis/Burair_pan_scripts/breed_prediction_test"
base_dir <- "/scratch/jc33471/canine_tumor_test/breed_prediction"
################# Input files ########################
# make sure to modify the paths to the correct ones
VAF_file <- paste(base_dir, "PanCancer_disc_val_merged_germline_VAF_01_01_2021.txt.gz", sep=seperator);
depth_file <- paste(base_dir, "PanCancer_disc_val_merged_germline_depths_01_01_2021.txt.gz", sep=seperator);
################# Output files ########################
# make sure to modify the paths to the correct ones
VAF_output_file <- paste(base_dir, "germline_VAF_matrix.reset_low_coverage.txt.gz", sep=seperator);
VAF_data <- fread(VAF_file, header=F, sep="\t")
library(R.utils)
library(R.utils)
VAF_data <- fread(VAF_file, header=F, sep="\t")
#check.names=F, stringsAsFactors=F);
VAF_data <- setDF(VAF_data)
depth_data <- fread(depth_file, header=F, sep="\t")
#check.names=F, stringsAsFactors=F);
depth_data <- setDF(depth_data)
# filtering VAF based on BED depth
for(i in (residue_column_count+1):ncol(depth_data)) {
depths_as_strings <- as.vector(unlist(depth_data[-c(1:meta_row_count), i]));
bed_depths_as_numbers <- as.numeric(sapply(depths_as_strings, function(x) {strsplit(x, ",", fixed=T)[[1]][1]},  USE.NAMES=F));
vcf_depths_as_numbers <- as.numeric(sapply(depths_as_strings, function(x) {strsplit(x, ",", fixed=T)[[1]][2]},  USE.NAMES=F));
na_depth <- which(is.na(bed_depths_as_numbers));
vcf_na_depth <- which(is.na(vcf_depths_as_numbers));
low_depth <- which(bed_depths_as_numbers < depth_cutoff);
reset_rows <- union(c(na_depth, low_depth), vcf_na_depth) + meta_row_count;
VAF_data[reset_rows, i] <- "NA";
print(paste("col", (i-residue_column_count), "of", (ncol(depth_data)-residue_column_count)));
flush.console();
}
df <- read.csv("/home/jc33471/canine_tumor_wes/metadata/data_collection_old.csv", stringsAsFactors = T)
View(df)
df[c(2,1,4,7,5)]
write.csv(df_out, file = "/scratch/jc33471/canine_tumor_test/breed_prediction/breed_prediction_metadata.txt",row.names = F, col.names = c("Sample_id","SampleName","DiseaseAcronym","Breed","Status"))
df_out <- df[c(2,1,4,7,5)]
write.csv(df_out, file = "/scratch/jc33471/canine_tumor_test/breed_prediction/breed_prediction_metadata.txt",row.names = F, col.names = c("Sample_id","SampleName","DiseaseAcronym","Breed","Status"))
colnames(df_out) <- c("Sample_id","SampleName","DiseaseAcronym","Breed","Status")
write.csv(df_out, file = "/scratch/jc33471/canine_tumor_test/breed_prediction/breed_prediction_metadata.txt",row.names = F)
# Merge Dis val
library(data.table)
# These parameters are related to the structure of the input file containing VAF values (don't change any of them)
residue_column_count <- 7; # number of columns describing each variant
meta_row_count <- 1; # number of rows dedicated to meta data (sample ids, and others if applicable) in the VAF input file
######### Parameters for both breed-unique and breed-enriched variants discovery
global_sufficient_cov_cutoff <- 0.8; # all variants must have sufficient coverage in at least 80% of the samples in the discovery dataset
# Breeds for which breed-specific variants, breed validation or prediction to be performed
examined_breeds <- c("Yorkshire Terrier", "Shih Tzu", "Poodle", "Maltese", "Rottweiler", "Greyhound", "Golden Retriever", "Cocker Spaniel", "Boxer","Schnauzer");
# Samples with Mixed breed will be excluded from all analyses (breed-specific variant discovery, breed validation and prediction)
excluded_breeds <- c("Mixed");
# All samples with known breeds except examined or Mixed are assigned to Other. They will be used to filter out some candidate breed-specific variants, but will not be used in breed validation or prediction.
breed_names <- c(examined_breeds, "Other");
# For breed-unique and breed-enriched variants discovery, any variant with VAF >= 0.2 is considered a non-reference variant (heterozygous or homozygoug alternative)
non_ref_VAF_cutoff <- 0.2;
seperator <- "/"
file_base_dir <- "/scratch/jc33471/canine_tumor_test/breed_prediction"
script_dir <- "/home/jc33471/canine_tumor_wes/scripts/breed_prediction"
######### Parameters for breed-unique variants discovery
# For breed-unique variants discovery, VAF interval for heterozygous alleles is [0.2, 0.8) and for homozygoug alternative allele is [0.8, 1]
hom_VAF_cutoff <- 0.8;
breed_sufficient_cov_cutoff <- 0.5; # every unique variant must have sufficient coverage in at least 50% of the samples in every examined breed
unique_variants_sample_cutoffs <- c(5, 0.4); # A breed-unique variant of breed A must be observed in at least 5 samples or 40% of samples in breed A, whichever more. So, this variable includes both cutoffs (count and fraction)
######### Parameters for breed-enriched variants discovery
fisher_pvalue_cutoff <- 0.1; # A breed-enriched variant must be enriched in a breed against every other breed at Fisher's p-value of 0.1
# All breed-enriched variants must be enriched in a breed "A" against every other breed at fisher_pvalue_cutoff.
# If the below value is TRUE, variants enriched in any comparison between two breeds (neither of which is breed "A") will be filtered out
filter_non_specific_variants <- TRUE;
############ code dependency paths ########################
# Code to build sample meta data
# build_meta_data_code_path <- paste(file_base_dir, "build_sample_meta_data.R", sep=seperator);
build_meta_data_code_path <- paste(script_dir, "build_sample_meta_data.R", sep=seperator);
############ Input and output paths ########################
# Please modify these file paths as needed
# Input file containing VAF values for all samples for each germline variant: samples as columns and variants as rows
VAF_input_file <- paste(file_base_dir, "germline_VAF_matrix.reset_low_coverage.txt.gz", sep=seperator);
output_base <- paste(file_base_dir, "output_exclude_WGS", sep=seperator);
unique_variants_output_file <- paste(output_base, "breed_unique_variants.txt", sep=seperator);
enriched_variants_output_file <- paste(output_base, "breed_enriched_variants.txt", sep=seperator);
specific_variants_output_file <- paste(output_base, "all_breed_specific_variants.txt", sep=seperator);
meta_data_file <- paste(file_base_dir, "breed_prediction_metadata.txt", sep=seperator);
VAF_data <- fread(VAF_input_file, header=F, sep="\t", check.names=F, stringsAsFactors=F);
VAF_data <- setDF(VAF_data)
### building meta_data data frame
source(build_meta_data_code_path);
meta_data <- build_meta_data(meta_data_file);
meta_data_file
write.table(df_out, file = "/scratch/jc33471/canine_tumor_test/breed_prediction/breed_prediction_metadata.txt",row.names = F,sep = "\t")
write.table(df_out, file = "/scratch/jc33471/canine_tumor_test/breed_prediction/breed_prediction_metadata.txt",row.names = F,sep = "\t",quote = F)
### building meta_data data frame
source(build_meta_data_code_path);
meta_data <- build_meta_data(meta_data_file);
removed_columns <- c("Sample_id", "SampleName", "Status");
## constructing meta_data data frame
temp_meta_data <- read.table(meta_data_file, header=T, sep="\t", check.names=F, stringsAsFactors=F);
tumor_rows <- which(temp_meta_data[, "Status"] == "Tumor");
normal_rows <- which(temp_meta_data[, "Status"] == "Normal");
sample_names <- temp_meta_data[tumor_rows, "SampleName"];
status_col <- which(colnames(temp_meta_data) == "Status");
removed_column_indices <- which(colnames(temp_meta_data) %in% removed_columns);
meta_data <- temp_meta_data[tumor_rows, -removed_column_indices];
rownames(meta_data) <- sample_names;
meta_data[, "TumorID"] <- temp_meta_data[tumor_rows, "Sample_id"];
meta_data[, "NormalID"] <- temp_meta_data[normal_rows, "Sample_id"];
View(meta_data)
View(temp_meta_data)
tumor_rows <- which(temp_meta_data[, "Status"] == "Tumor");
normal_rows <- which(temp_meta_data[, "Status"] == "Normal");
View(VAF_data)
df <- read.csv("/home/jc33471/canine_tumor_wes/metadata/data_collection_old.csv", stringsAsFactors = T)
df_out <- df[c(2,1,4,7,5)]
colnames(df_out) <- c("Sample_id","SampleName","DiseaseAcronym","Breed","Status")
View(df_out)
table(df_out$Status)
table(df_out$SampleName)
table_SampleName <- table(df_out$SampleName)
df_out[df_out$SampleName %in% names(table_SampleName)[table_SampleName>1],]
df_out <- df_out[df_out$SampleName %in% names(table_SampleName)[table_SampleName>1],]
write.table(df_out, file = "/scratch/jc33471/canine_tumor_test/breed_prediction/breed_prediction_metadata.txt",row.names = F,sep = "\t",quote = F)
meta_data <- build_meta_data(meta_data_file);
meta_data <- meta_data[meta_data$Dataset == "Discovery",]
## here is the problem but now sloved with only choose the first normal column
meta_data <- add_tumor_normal_columns(meta_data, unlist(VAF_data[meta_row_count, ]));
meta_data <- build_meta_data(meta_data_file);
df_out
write.table(df_out, file = "/scratch/jc33471/canine_tumor_test/breed_prediction/breed_prediction_metadata.txt",row.names = F,sep = "\t",quote = F)
removed_columns <- c("Sample_id", "SampleName", "Status");
## constructing meta_data data frame
temp_meta_data <- read.table(meta_data_file, header=T, sep="\t", check.names=F, stringsAsFactors=F);
tumor_rows <- which(temp_meta_data[, "Status"] == "Tumor");
normal_rows <- which(temp_meta_data[, "Status"] == "Normal");
sample_names <- temp_meta_data[tumor_rows, "SampleName"];
status_col <- which(colnames(temp_meta_data) == "Status");
removed_column_indices <- which(colnames(temp_meta_data) %in% removed_columns);
meta_data <- temp_meta_data[tumor_rows, -removed_column_indices];
rownames(meta_data) <- sample_names;
meta_data[, "TumorID"] <- temp_meta_data[tumor_rows, "Sample_id"];
meta_data[, "NormalID"] <- temp_meta_data[normal_rows, "Sample_id"];
meta_data <- build_meta_data(meta_data_file, exclud_fail_samples = F);
meta_data <- meta_data[meta_data$Dataset == "Discovery",]
meta_data <- build_meta_data(meta_data_file);
meta_data <- build_meta_data(meta_data_file);
#meta_data <- meta_data[meta_data$Dataset == "Discovery",]
## here is the problem but now sloved with only choose the first normal column
meta_data <- add_tumor_normal_columns(meta_data, unlist(VAF_data[meta_row_count, ]));
meta_data <- build_meta_data(meta_data_file, exclud_fail_samples = F);
#meta_data <- meta_data[meta_data$Dataset == "Discovery",]
## here is the problem but now sloved with only choose the first normal column
meta_data <- add_tumor_normal_columns(meta_data, unlist(VAF_data[meta_row_count, ]));
# now make residue variant names
variant_names <- apply(VAF_data[-c(1), c(1:6)], MARGIN=1, function(x) {paste(as.vector(unlist(x)), collapse="_")});
names(variant_names) <- NULL;
variant_name_to_output <- function(variant_name) {
variant_tokens <- strsplit(variant_name, fixed=TRUE, split="_")[[1]];
gene <- variant_tokens[1];
locus <- paste(variant_tokens[2], variant_tokens[3], sep=":");
mutation <- paste(variant_tokens[4], variant_tokens[5], sep=">");
protein <- variant_tokens[6];
return(paste(gene, locus, mutation, protein, sep="\t"));
}
# now reading VAF values for normal samples
normal_VAF_data <- data.matrix(VAF_data[-c(1:meta_row_count), meta_data[, "NormalCol"]]);
colnames(normal_VAF_data) <- rownames(meta_data);
rownames(normal_VAF_data) <- variant_names;
df <- read.csv("/home/jc33471/canine_tumor_wes/metadata/data_collection_old.csv", stringsAsFactors = T)
View(df)
# Merge Dis val
library(data.table)
# These parameters are related to the structure of the input file containing VAF values (don't change any of them)
residue_column_count <- 7; # number of columns describing each variant
meta_row_count <- 1; # number of rows dedicated to meta data (sample ids, and others if applicable) in the VAF input file
######### Parameters for both breed-unique and breed-enriched variants discovery
global_sufficient_cov_cutoff <- 0.8; # all variants must have sufficient coverage in at least 80% of the samples in the discovery dataset
# Breeds for which breed-specific variants, breed validation or prediction to be performed
examined_breeds <- c("Yorkshire Terrier", "Shih Tzu", "Poodle", "Maltese", "Rottweiler", "Greyhound", "Golden Retriever", "Cocker Spaniel", "Boxer","Schnauzer");
# Samples with Mixed breed will be excluded from all analyses (breed-specific variant discovery, breed validation and prediction)
excluded_breeds <- c("Mixed");
# All samples with known breeds except examined or Mixed are assigned to Other. They will be used to filter out some candidate breed-specific variants, but will not be used in breed validation or prediction.
breed_names <- c(examined_breeds, "Other");
# For breed-unique and breed-enriched variants discovery, any variant with VAF >= 0.2 is considered a non-reference variant (heterozygous or homozygoug alternative)
non_ref_VAF_cutoff <- 0.2;
seperator <- "/"
file_base_dir <- "/scratch/jc33471/canine_tumor_test/breed_prediction"
script_dir <- "/home/jc33471/canine_tumor_wes/scripts/breed_prediction"
######### Parameters for breed-unique variants discovery
# For breed-unique variants discovery, VAF interval for heterozygous alleles is [0.2, 0.8) and for homozygoug alternative allele is [0.8, 1]
hom_VAF_cutoff <- 0.8;
breed_sufficient_cov_cutoff <- 0.5; # every unique variant must have sufficient coverage in at least 50% of the samples in every examined breed
unique_variants_sample_cutoffs <- c(5, 0.4); # A breed-unique variant of breed A must be observed in at least 5 samples or 40% of samples in breed A, whichever more. So, this variable includes both cutoffs (count and fraction)
######### Parameters for breed-enriched variants discovery
fisher_pvalue_cutoff <- 0.1; # A breed-enriched variant must be enriched in a breed against every other breed at Fisher's p-value of 0.1
# All breed-enriched variants must be enriched in a breed "A" against every other breed at fisher_pvalue_cutoff.
# If the below value is TRUE, variants enriched in any comparison between two breeds (neither of which is breed "A") will be filtered out
filter_non_specific_variants <- TRUE;
############ code dependency paths ########################
# Code to build sample meta data
# build_meta_data_code_path <- paste(file_base_dir, "build_sample_meta_data.R", sep=seperator);
build_meta_data_code_path <- paste(script_dir, "build_sample_meta_data.R", sep=seperator);
############ Input and output paths ########################
# Please modify these file paths as needed
# Input file containing VAF values for all samples for each germline variant: samples as columns and variants as rows
VAF_input_file <- paste(file_base_dir, "germline_VAF_matrix.reset_low_coverage.txt.gz", sep=seperator);
output_base <- paste(file_base_dir, "output_exclude_WGS", sep=seperator);
unique_variants_output_file <- paste(output_base, "breed_unique_variants.txt", sep=seperator);
enriched_variants_output_file <- paste(output_base, "breed_enriched_variants.txt", sep=seperator);
specific_variants_output_file <- paste(output_base, "all_breed_specific_variants.txt", sep=seperator);
meta_data_file <- paste(file_base_dir, "breed_prediction_metadata.txt", sep=seperator);
VAF_data <- fread(VAF_input_file, header=F, sep="\t", check.names=F, stringsAsFactors=F);
VAF_data <- setDF(VAF_data)
meta_data <- build_meta_data(meta_data_file, exclud_fail_samples = F);
### building meta_data data frame
source(build_meta_data_code_path);
#meta_data <- meta_data[meta_data$Dataset == "Discovery",]
## here is the problem but now sloved with only choose the first normal column
meta_data <- add_tumor_normal_columns(meta_data, unlist(VAF_data[meta_row_count, ]));
# now make residue variant names
variant_names <- apply(VAF_data[-c(1), c(1:6)], MARGIN=1, function(x) {paste(as.vector(unlist(x)), collapse="_")});
names(variant_names) <- NULL;
variant_name_to_output <- function(variant_name) {
variant_tokens <- strsplit(variant_name, fixed=TRUE, split="_")[[1]];
gene <- variant_tokens[1];
locus <- paste(variant_tokens[2], variant_tokens[3], sep=":");
mutation <- paste(variant_tokens[4], variant_tokens[5], sep=">");
protein <- variant_tokens[6];
return(paste(gene, locus, mutation, protein, sep="\t"));
}
# now reading VAF values for normal samples
normal_VAF_data <- data.matrix(VAF_data[-c(1:meta_row_count), meta_data[, "NormalCol"]]);
colnames(normal_VAF_data) <- rownames(meta_data);
rownames(normal_VAF_data) <- variant_names;
# now get samples for each breed
breed_info <- meta_data[, "Breed"];
names(breed_info) <- rownames(meta_data);
breed_info[which(breed_info %in% excluded_breeds)] <- NA;
breed_samples <- list();
for(breed in examined_breeds) {
breed_samples[[breed]] <- names(which(breed_info == breed));
}
# Check first to see if there are samples with pure breed other than the examined breeds
other_breed_samples <- setdiff(names(breed_info), names(which(is.na(breed_info))));
other_breed_samples <- setdiff(breed_samples[["Other"]], names(breed_info)[which(breed_info %in% examined_breeds)]);
if(length(other_breed_samples) > 0) {
breed_samples[["Other"]] <- setdiff(names(breed_info), names(which(is.na(breed_info))));
breed_samples[["Other"]] <- setdiff(breed_samples[["Other"]], names(breed_info)[which(breed_info %in% examined_breeds)]);
} else {
# There are no samples with a pure breed other than the examined breed. We must remove "Other" breed category
breed_names <- setdiff(breed_names, "Other");
}
non_na_count_cutoff <- ncol(normal_VAF_data) * global_sufficient_cov_cutoff;
############ Finding breed-unique variants ########################
unique_variant_results <- paste(c("Gene", "Locus", "Mutation", "Protein", "Breed", "Variant_Type", "Sample_Count", "Sample_Percentage"), collapse="\t");
unique_variants_summary <- c();
unique_sample_counts <- list("Hom"=list(), "Het"=list(), "Het,Hom"=list(), "Any"=list());
for(variant_type_counts in names(unique_sample_counts)) {
for(breed in examined_breeds) {
unique_sample_counts[[variant_type_counts]][[breed]] <- list("Count"=c(), "Percentage"=c());
}
}
for(i in 1:nrow(normal_VAF_data)) {
variant <- variant_names[i];
variant_VAF <- normal_VAF_data[variant,];
non_na_samples <- names(which(is.na(variant_VAF) == FALSE));
if(length(non_na_samples) >= non_na_count_cutoff) {
variant_VAF <- variant_VAF[non_na_samples];
ref_samples <- names(which(variant_VAF < non_ref_VAF_cutoff));
homoz_samples <- names(which(variant_VAF >= hom_VAF_cutoff));
heter_samples <- names(which(variant_VAF >= non_ref_VAF_cutoff));
heter_samples <- setdiff(heter_samples, homoz_samples);
samples_by_variant_type <- list("Ref"=ref_samples, "Het"=heter_samples, "Hom"=homoz_samples);
breeds_by_variant_type <- list();
for(variant_type in names(samples_by_variant_type)) {
breeds_by_variant_type[[variant_type]] <- setdiff(unique(meta_data[samples_by_variant_type[[variant_type]], "Breed"]), NA);
}
## check uniqueness (exactly one breed is observed in Het and/or Hom)
unique_variant_type <- c();
if(length(breeds_by_variant_type[["Hom"]]) == 1 && length(breeds_by_variant_type[["Het"]]) == 1) {
# is it the same unique breed that has both homozygoug and heterozygous variants
if(breeds_by_variant_type[["Hom"]][1] == breeds_by_variant_type[["Het"]][1]) {
unique_variant_type <- c("Het", "Hom");
}
} else if(length(breeds_by_variant_type[["Hom"]]) == 1 && length(breeds_by_variant_type[["Het"]]) == 0) {
unique_variant_type <- c("Hom");
} else if(length(breeds_by_variant_type[["Hom"]]) == 0 && length(breeds_by_variant_type[["Het"]]) == 1) {
unique_variant_type <- c("Het");
} # else unique_variant_type is empty, meaning this variant is not unique to any breed
if(length(unique_variant_type) > 0) {
## this variant is unique to one breed
## Check condition 1
## 1. if there are enough samples this breed with the variant and if it belongs to an examined breed
breed_of_unique_variant <- breeds_by_variant_type[[unique_variant_type[1]]];
if(breed_of_unique_variant %in% examined_breeds) {
breed_samples_with_variant <- c();
for(variant_type in unique_variant_type) {
breed_samples_with_variant <- c(breed_samples_with_variant, samples_by_variant_type[[variant_type]]);
}
breed_samples_with_variant <- intersect(breed_samples_with_variant, breed_samples[[breed_of_unique_variant]]);
condition1 <- length(breed_samples_with_variant) >= unique_variants_sample_cutoffs[1] &&
length(breed_samples_with_variant)/length(breed_samples[[breed_of_unique_variant]]) >= unique_variants_sample_cutoffs[2];
if(condition1 == TRUE) {
## There are enough samples in this breed with Hom and/or Het variant(s).
## 2. Check if every other breed has enough Ref variant samples
condition2 <- TRUE;
condition2_iteration <- 0;
while(condition2 == TRUE && condition2_iteration < length(breed_samples)) {
condition2_iteration <- condition2_iteration + 1;
other_breed <- names(breed_samples)[condition2_iteration];
if(other_breed != breed_of_unique_variant) {
other_breed_ref_samples <- intersect(ref_samples, breed_samples[[other_breed]]);
if(length(other_breed_ref_samples)/length(breed_samples[[other_breed]]) < breed_sufficient_cov_cutoff) {
condition2 <- FALSE;
}
}
}
if(condition2 == TRUE) {
## This is a breed-unique variant with all conditions satisfied.
## Add it to the final results
unique_variants_summary[variant] <- breed_of_unique_variant;
summary_type <- paste(unique_variant_type, collapse=",");
sample_count <- length(breed_samples_with_variant);
sample_percentage <- round(100 * length(breed_samples_with_variant)/length(breed_samples[[breed_of_unique_variant]]), 2);
summary_row <- c(variant_name_to_output(variant), breed_of_unique_variant, summary_type, sample_count, sample_percentage);
unique_variant_results <- c(unique_variant_results, paste(summary_row, collapse="\t"));
}
}
}
}
}
if(i %% 1000 == 0) {
print(paste("Testing for breed-unique variants:", i, "of", length(variant_names)));
flush.console();
}
}
# Saving results for breed-unique variants
sink(unique_variants_output_file);
for(line in unique_variant_results) {
cat(line, "\n", sep="");
}
sink();
unique_variants_output_file
############ Finding breed-enriched variants ########################
enriched_variants_summary <- c();
enriched_variant_results <- paste("Gene", "Locus", "Mutation", "Protein", "Enriched in", sep="\t");
for(i in 1:nrow(normal_VAF_data)) {
variant <- variant_names[i];
variant_VAF <- normal_VAF_data[variant,];
non_na_samples <- names(which(is.na(variant_VAF) == FALSE));
if(length(non_na_samples) >= non_na_count_cutoff) {
enrichment_matrix <- matrix(nrow=length(breed_names), ncol=length(breed_names));
rownames(enrichment_matrix) <- breed_names;
colnames(enrichment_matrix) <- breed_names;
for(b1 in 1:(length(breed_names)-1)) {
breed1 <- breed_names[b1];
b1_samples <- intersect(breed_samples[[breed1]], non_na_samples);
b1_samples_with_variant <- which(variant_VAF[b1_samples] >= non_ref_VAF_cutoff);
b1_variant_ratio <- length(b1_samples_with_variant)/length(b1_samples);
for(b2 in (b1+1):length(breed_names)) {
breed2 <- breed_names[b2];
b2_samples <- intersect(breed_samples[[breed2]], non_na_samples);
# This is fisher test (we shouldn't use fisher test which is why it's commented out)
b2_samples_with_variant <- which(variant_VAF[b2_samples] >= non_ref_VAF_cutoff);
x <- cbind(c(length(b1_samples_with_variant), length(b1_samples) - length(b1_samples_with_variant)),
c(length(b2_samples_with_variant), length(b2_samples) - length(b2_samples_with_variant)));
fisher_test <- fisher.test(x);
if(is.na(fisher_test[["p.value"]]) == FALSE && fisher_test[["p.value"]] < fisher_pvalue_cutoff) {
b2_variant_ratio <- length(b2_samples_with_variant)/length(b2_samples);
if(b1_variant_ratio > b2_variant_ratio) {
enrichment_matrix[breed1, breed2] <- "Enriched";
} else {
enrichment_matrix[breed2, breed1] <- "Enriched";
}
}
}
}
breed_enrichment_counts <- apply(enrichment_matrix, 1, function(x) {length(which(x == "Enriched"))});
names(breed_enrichment_counts) <- breed_names;
if(filter_non_specific_variants == TRUE) {
# Only allow breed-specific variants
if(length(which(breed_enrichment_counts == 0)) == (length(breed_names)-1)) {
# Only one breed has been reported enriched in at least one fisher test
enriched_breed <- names(which(breed_enrichment_counts > 0));
if(breed_enrichment_counts[enriched_breed] == (length(breed_names)-1)) {
# This breed is enriched in this variant against every other breed.
enriched_variants_summary[variant] <- enriched_breed;
enriched_variant_results <- c(enriched_variant_results, paste(variant_name_to_output(variant), enriched_breed, sep="\t"));
}
}
} else {
# Allow all breed-enriched variants
enriched_breed <- which(breed_enrichment_counts == (length(breed_names)-1));
if(length(enriched_breed) > 0) {
enriched_breed <- names(breed_enrichment_counts)[enriched_breed];
enriched_variants_summary[variant] <- enriched_breed;
enriched_variant_results <- c(enriched_variant_results, paste(variant_name_to_output(variant), enriched_breed, sep="\t"));
}
}
}
if(i %% 250 == 0) {
print(paste("Testing for breed-enriched variants:", i, "of", length(variant_names)));
flush.console();
}
}
# Saving results for breed-unique variants
sink(enriched_variants_output_file);
for(line in enriched_variant_results) {
cat(line, "\n", sep="");
}
sink();
# Saving results for all breed-specific variants
breed_unique_only <- setdiff(names(unique_variants_summary), names(enriched_variants_summary));
all_specific_variants <- enriched_variants_summary;
if(length(breed_unique_only) > 0) {
all_specific_variants <- c(all_specific_variants, breed_unique_only);
}
all_specific_variants <- all_specific_variants[order(all_specific_variants)];
# Saving results for all breed-specific variants
breed_unique_only <- setdiff(names(unique_variants_summary), names(enriched_variants_summary));
all_specific_variants <- enriched_variants_summary;
unique_variant_results
############ Finding breed-unique variants ########################
unique_variant_results <- paste(c("Gene", "Locus", "Mutation", "Protein", "Breed", "Variant_Type", "Sample_Count", "Sample_Percentage"), collapse="\t");
unique_variants_summary <- c();
unique_sample_counts <- list("Hom"=list(), "Het"=list(), "Het,Hom"=list(), "Any"=list());
names(unique_sample_counts)
examined_breeds
for(variant_type_counts in names(unique_sample_counts)) {
for(breed in examined_breeds) {
unique_sample_counts[[variant_type_counts]][[breed]] <- list("Count"=c(), "Percentage"=c());
}
}
View(unique_sample_counts)
unique_sample_counts[["Hom"]]
View(normal_VAF_data)
