localrules: all,download_vcf,filter_technical,addtag_fractionlowcov,filter_fractionlowcov,combine_lifted_vcf,create_sample_list,add_vaf_region,create_vaf_matrix_region,create_breed_meta,breed_specific_idenfication,breed_specific_vafmatrix

###### split canfam3 reference into regions for liftover  
region_size = 10000000
chrs = []
with open(config['in']['ref']+".fai", "r") as fasta_index_file:
    for line in fasta_index_file:
        fields = line.strip().split("\t")
        chrom_name = fields[0]
        chrom_length = int(fields[1])
        region_start = 1
        while region_start < chrom_length:
            start = region_start
            end = region_start + region_size
            if end > chrom_length:
                end = chrom_length
            chrs.append(chrom_name + ":" + str(region_start) + "-" + str(end))
            region_start = end
    # for line in ref:
    #     if line.startswith(">"):
    #         chrs.append(line.strip().replace('>', ''))

###### variables  
breedlist = ['Dachshund','Appenzeller Sennenhund','Collie','Ibizan Hound',
            'Saint Bernard','German Spitz Mittel','Japanese Spitz','Keeshond',
            'Leonberger','Small Swiss Hound','Swiss Hound','German Spitz Klein',
            'Petit Basset Griffon Vendeen','Pyrenean Shepherd','Small Munsterlander',
            'White Swiss Shepherd Dog','Bernese Mountain Dog','Bouvier des Flandres',
            'English Toy Terrier','Greater Swiss Mountain Dog','Sealyham Terrier',
            'Smooth Fox Terrier','Toy Fox Terrier','Vizsla']

rule all:
    input:
        # expand(config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_liftover_{region}.vcf.gz", region=chrs),
        expand(config['out']['outdir']+"/breed_variants/{region}/breed_specific_variants_{region}.txt", region=chrs)
        # config['out']['outdir']+"/breed_variants/chr1:1-10000001/breed_specific_variants_chr1:1-10000001.txt"
        # breedSample=config['out']['outdir']+"/merge_vcf/breedSample.list"
        # config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_liftoverConcat.vcf.gz"

####### not tested in snakemake #######
rule download_vcf:
    output:
        config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs.vcf.gz"
    shell:
        '''
        wget -O {output} "https://kiddlabshare.med.umich.edu/dog10K/SNP_and_indel_calls_2021-10-17/AutoAndXPAR.SNPs.vqsr99.vcf.gz"
        '''

rule filter_technical:
    input:
        config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs.vcf.gz"
    output:
        temp(config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered.vcf.gz")
    conda:
        config['envs']['phylogenetics']
    threads: 
        config['resources']['threads']
    resources:
        mem=config['resources']['mem'] 
    shell:
        '''
        bcftools filter --threads {threads} \
            -e ' FS > 30 || QD < 2 ' --output-type z \
            -o {output} \
            {input}
        '''

# set coverage < 10 to missing genotype, and calculate the fraction of missing
rule addtag_fractionlowcov:
    input:
        config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered.vcf.gz"
    output:
        temp(config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added.vcf.gz")
    conda:
        config['envs']['phylogenetics']
    threads: 
        config['resources']['threads']
    resources:
        mem=config['resources']['mem'] 
    shell:
        '''
        bcftools +setGT --threads {threads} {input} -- -t q -i 'FMT/DP<10' -n ./. |\
            bcftools +fill-tags - -O z --threads {threads} -o {output} -- -t INFO/F_MISSING
        '''

# filter VCF by fraction of missing (variants with >20% samples missing)
rule filter_fractionlowcov:
    input:
        config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added.vcf.gz"
    output:
        vcf=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing.vcf.gz",
        index=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing.vcf.gz.csi"
    conda:
        config['envs']['phylogenetics']
    threads: 
        config['resources']['threads']
    resources:
        mem=config['resources']['mem'] 
    shell:
        '''
        bcftools filter --threads {threads} \
            -e ' F_MISSING > 0.2 ' --output-type z \
            -o {output.vcf} \
            {input}
        bcftools index --threads {threads} {output.vcf}
        '''

####### not tested in snakemake-end #######

rule vcf_chr:
    input:
        vcf=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing.vcf.gz"
    output:
        subvcf=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_{region}.vcf.gz"
    conda:
        config['envs']['phylogenetics']
    params:
        region=lambda wc: wc.get("region")
    threads: 
        config['resources']['threads']
    resources:
        mem=config['resources']['mem'] 
    log:
        config['out']['outdir']+"/logs/vcf_chr_{region}.log"
    wildcard_constraints:
        region="chr[0-9X]+.*"
    shell:
        '''
        bcftools view --threads {threads} \
            -r {params.region} --output-type z \
            -o {output.subvcf} \
            {input.vcf} &> {log}
        '''

rule liftover_chr:
    input:
        ref=config['in']['ref'],
        chain=config['out']['outdir']+"/vcf/canFam4ToCanFam3.over.chain.gz",
        subvcf=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_{region}.vcf.gz",
    output:
        liftover=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_liftover_{region}.vcf.gz",
        reject=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_liftover_{region}_rejected_variants.vcf.gz"
    conda:
        config['envs']['phylogenetics']
    params:
        region=lambda wc: wc.get("region")
    threads: 
        config['resources']['threads']
    resources:
        mem=config['resources']['mem'] 
    log:
        config['out']['outdir']+"/logs/liftover_chr_{region}.log"
    wildcard_constraints:
        region="chr[0-9X]+.*"
    shell:
        '''
        picard -Xmx{resources.mem} LiftoverVcf \
            I={input.subvcf}\
            O={output.liftover} \
            CHAIN={input.chain} \
            REJECT={output.reject} \
            WARN_ON_MISSING_CONTIG=true \
            MAX_RECORDS_IN_RAM=100000 \
            R={input.ref} &> {log}
        '''

rule combine_lifted_vcf:
    input:
        expand(config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_liftover_{region}.vcf.gz", region=chrs)
    output:
        config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_liftoverConcat.vcf.gz"
    conda:
        config['envs']['phylogenetics']
    threads: 
        config['resources']['threads']
    resources:
        mem=config['resources']['mem'] 
    shell:
        '''
        bcftools concat --threads {threads} \
            -o {output} -O z \
            {input}
        '''


rule create_sample_list:
    input:
        config['in']['metatable']
    output:
        breedSample=config['out']['outdir']+"/merge_vcf/breedSample.list"
    params:
        breeds = breedlist
    run:
        import csv
        out1 = open(output['breedSample'], "w")

        with open(input[0], 'r') as file:
            reader = csv.reader(file, delimiter=',', quoting=csv.QUOTE_NONE)
            header = next(reader)
            breed_idx = header.index('Breed')
            sample_idx = header.index('Sample_id')
            for row in reader:
                if row[breed_idx] in params['breeds']:
                    out1.write(row[sample_idx]+"\n")
        
        out1.close()

rule add_vaf_region:
    input:
        breedSample=config['out']['outdir']+"/merge_vcf/breedSample.list",
        vcf=config['out']['outdir']+"/vcf/Dog10K_AutoAndXPAR_SNPs_filtered_added_fmissing_liftover_{region}.vcf.gz"
    output:
        vcf=temp(config['out']['outdir']+"/vaf_matrix/{region}_vaf.vcf.gz")
    conda:
        config['envs']['phylogenetics']
    wildcard_constraints:
        region="chr[0-9X]+.*"
    threads: 
        1
    shell:
        '''
        bcftools view \
            -S {input.breedSample} --force-samples \
            {input.vcf} |\
        bcftools +fill-tags - -O z -o {output.vcf} -- -t FORMAT/VAF
        '''

rule create_vaf_matrix_region:
    input:
        vcf=config['out']['outdir']+"/vaf_matrix/{region}_vaf.vcf.gz"
    output:
        vaf_matrix=config['out']['outdir']+"/vaf_matrix/{region}.vaf_matrix.txt.gz"
    params:
        script=config['project_dir']+"/scripts/wgs/vaf_matrix.py"
    conda:
        config['envs']['phylogenetics']
    threads: 
        config['resources']['threads']
    resources:
        mem=config['resources']['mem'] 
    wildcard_constraints:
        region="chr[0-9X]+.*"
    shell:
        '''
        python {params.script} \
            {input.vcf} \
            {output.vaf_matrix} \
            {threads} {resources.mem}
        '''

rule create_breed_meta:
    input:
        metatable=config['in']['metatable']
    output:
        breed_meta=config['out']['outdir']+"/breed_variants/breed_prediction_metadata.txt"
    shell:
        '''
        awk 'BEGIN{{FS=",";OFS="\\t"}}{{print $1,$3,$4,$5,$6,$7}}' {input.metatable} > {output.breed_meta}
        '''


rule breed_specific_idenfication:
    input:
        vaf_matrix=config['out']['outdir']+"/vaf_matrix/{region}.vaf_matrix.txt.gz",
        breed_meta=config['out']['outdir']+"/breed_variants/breed_prediction_metadata.txt"
    output:
        breed_unique=config['out']['outdir']+"/breed_variants/{region}/breed_unique_variants_{region}.txt",
        breed_enriched=config['out']['outdir']+"/breed_variants/{region}/breed_enriched_variants_{region}.txt",
        breed_specific=config['out']['outdir']+"/breed_variants/{region}/breed_specific_variants_{region}.txt"
    params:
        script=config['project_dir']+"/scripts/wgs/breed_specific_variants_wgs.R",
        meta_code=config['project_dir']+"/scripts/breed_prediction/build_sample_meta_data.R",
        breedlist=breedlist
    conda:
        config['envs']['phylogenetics']
    wildcard_constraints:
        region="chr[0-9X]+.*"
    log:
        config['out']['outdir']+"/logs/breed_specific_idenfication_{region}.log"
    shell:
        '''
        Rscript --vanilla {params.script} \
            {params.meta_code} \
            {input.vaf_matrix} \
            {output.breed_unique} \
            {output.breed_enriched} \
            {output.breed_specific} \
            {input.breed_meta} \
            params.breedlist &> {log}
        '''

rule breed_specific_vafmatrix:
    input:
        vaf_matrix=config['out']['outdir']+"/vaf_matrix/{region}.vaf_matrix.txt.gz",
        breed_specific=config['out']['outdir']+"/breed_variants/{region}/breed_specific_variants_{region}.txt"
    output:
        selected_matrix=config['out']['outdir']+"/breed_variants/{region}/{region}.breed_specific.vaf_matrix.txt"
    params:
    conda:
        config['envs']['phylogenetics']
    wildcard_constraints:
        region="chr[0-9X]+.*"
    shell:
        '''
        awk '{{if($1=="None"){{split($2,locus,":"); split($3,mut,">"); print locus[1]"\\t"locus[2]"\\t"mut[1]"\\t"mut[2] }} }}' {input.breed_specific} > {input.breed_specific}"reformat"
        zgrep -f {input.breed_specific}"reformat" {input.vaf_matrix} >  {output.selected_matrix}
        '''

